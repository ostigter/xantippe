Design
======


Java interface
--------------

interface Database {
    void start() throws XmldbException
    void shutdown() throws XmldbException
    boolean isRunning()
    Collection getRootCollection() throws XmldbException
    Collection getCollection(String uri) throws XmldbException
    Document getDocument(String uri) throws XmldbException
}

public class Collection {
    String getName()
    Date getCreated()
    Date getModified()
    Set<Collection> getCollections()
    Collection getCollection(String name)
    Set<Document> getDocuments()
    Document getDocument(String name)
    Set<Document> findDocuments(Key[] keys)
    Collection createCollection(String name) throws XmldbException
    Document createDocument(String name) throws XmldbException
    void delete(boolean recursive) throws XmldbException
}

public class Document {
    String getName()
    void setName(String name) throws XmldbException
    Date getCreated()
    Date getModified()
    long getSize()
    InputStream getContent() throws XmldbException
    OutputStream setContent() throws XmldbException
    Set<Key> getKeys()
    Object getKey(String name)
    void setKeys(Keys[] keys)
    void setKey(String name, Object value)
    void move(Collection col) throws XmldbException
    void copy(Collection col) throws XmldbException
    void copy(Collection col, String name) throws XmldbException
    void delete() throws XmldbException
}

public class Key {
    String getName()
    void setName(String name)
    Object getValue()
    void setValue(Object value)
}

public class XmldbException {
    XmldbException(String msg)
    XmldbException(String msg, Throwable t)
}



XQuery API
----------

void createCollection(String uri)
String[] listCollection(String uri)
void deleteCollection(String uri, boolean force)


WebDAV API
----------

Create Collection:      MKCOL   <col_uri>
List Collection:        GET     <col_uri>
Delete Collection:      DELETE  <col_uri>
Store Document:         PUT     <doc_uri>
Retrieve Document:      GET     <doc_uri>
Delete Document:        DELETE  <doc_uri>


REST API
--------

Create Collection:      PUT     <col_uri>
Find Documents:         GET     <col_uri>?<key_name>=<key_value>[&<key_name>=<key_value>]...
Execute XQuery Module:  GET     <module_uri>
Execute XQuery:         GET     query?<xquery>


Storage
-------

metadata.dbx
------------

<nextId> (4 bytes)


collections.dbx
---------------

Example:

db/ (ID 1)
  data/ (ID 2)
    doc_0001.xml (ID 3)
    doc_0002.xml (ID 4)
  modules/ (ID 5)
    main.xqy (ID 6)
    util.xqy (ID 7)

1                       # col ID
"db"                    # col name
-1                      # parent ID
0                       # doc count
2                       # col count
  2                     # col ID
  "data"                # name
  1                     # parent ID
  2                     # doc count
    3                   # doc ID
    "doc_0001.xml"      # doc name
    4                   # doc ID
    "doc_0002.xml"      # doc name
  0                     # col count
  5                     # col ID
  "modules"             # col name
  1                     # parent ID
  2                     # doc count
    6                   # doc ID
    "main.xqy"          # doc name
    7                   # doc ID
    "util.xqy"          # doc name
  0                     # col count


indices.dbx
-----------

Structure:

  Collection
    indices : Set<Index>
      id
      name (unique in collection inheritance tree)
      path (to element or attribute)
      type (STRING | INTEGER | DOUBLE | DATE)
    indexValues : Map<Integer, Map<Object, Set<Integer>>>
      index : Integer
      values : Map<Object, Set<Integer>>
        value : Object
        documents : Set<Integer>

Examples:

  Collection {"/db/data"}
    indices
      Index {101, "DocumentId", "/element()/Header/DocumentId", IndexType.INTEGER}
      Index {102, "DocumentType", "/element()/Header/DocumentType", IndexType.STRING}
      Index {103, "DocumentVersion", "/element()/Header/DocumentVersion", IndexType.STRING}
    indexValues
      IndexValue {101, { {1, {11}}, {2, {12}}, {3, {13}} } }
      IndexValue {102, { {"Foo", {11, 12} }, {"Bar", {13} } }
      IndexValue {103, { {"v1.0", {11, 12} }, {"v1.1", {13} } }
  Collection {"/db/data/results"}
    indices
      Index {104, "TestType", "/element()/Body/Test/Type", IndexType.STRING}
    indexValues
      IndexValue {101, { {4, {14} } } }
      IndexValue {104, { {"FooTest", {14} } } }


Configuration file
------------------

<?xml version="1.0" encoding="UTF-8"?>
<c:Configuration xmlns:c="http://www.xantippe.org/XMLSchema/Configuration/v1.0">

  <Database dir="data"/>
  
  <Validation default="off">
    <Collection uri="/db/data"         validation="auto"/>
    <Collection uri="/db/data/results" validation="required"/>
    <Collection uri="/db/data/tests"   validation="off"/>
    <Collection uri="/db/schemas"      validation="default"/>
    <Collection uri="/db/temp"         validation="default"/>
  </Validation>
  
  <WebDavInterface enabled="true" port="8081"/>
  
  <RestInterface enabled="true" port="8081"/>
  
</c:Xantippe>
