Design
======


Java interface
--------------

interface Database {
    void start() throws XmldbException
    void shutdown() throws XmldbException
    boolean isRunning()
    Collection getRootCollection() throws XmldbException
    Collection getCollection(String uri) throws XmldbException
    Document getDocument(String uri) throws XmldbException
}

public class Collection {
    String getName()
    Date getCreated()
    Date getModified()
    Set<Collection> getCollections()
    Collection getCollection(String name)
    Set<Document> getDocuments()
    Document getDocument(String name)
    Collection createCollection(String name) throws XmldbException
    Document createDocument(String name) throws XmldbException
    Set<Document> findDocuments(Key[] keys, boolean recursive)
    void delete(boolean recursive) throws XmldbException
}

public class Document {
    String getName()
    void setName(String name) throws XmldbException
    Date getCreated()
    Date getModified()
    long getSize()
    InputStream getContent() throws XmldbException
    OutputStream setContent() throws XmldbException
    void setContent(File file) throws XmldbException
    void setKey(String name, Object value)
    void move(Collection col) throws XmldbException
    void copy(Collection col) throws XmldbException
    void copy(Collection col, String name) throws XmldbException
    void delete() throws XmldbException
}

public class Key {
    String getName()
    void setName(String name)
    Object getValue()
    void setValue(Object value)
}

public class XmldbException {
    XmldbException(String msg)
    XmldbException(String msg, Throwable t)
}



XQuery API
----------

void createCollection(String uri)
String[] listCollection(String uri)
void deleteCollection(String uri, boolean force)


WebDAV API
----------

Create Collection:      MKCOL   <col_uri>
List Collection:        GET     <col_uri>
Delete Collection:      DELETE  <col_uri>
Store Document:         PUT     <doc_uri>
Retrieve Document:      GET     <doc_uri>
Delete Document:        DELETE  <doc_uri>


REST API
--------

Create Collection:      PUT     <col_uri>
Find Documents:         GET     <col_uri>?<key_name>=<key_value>[&<key_name>=<key_value>]...
Execute XQuery Module:  GET     <module_uri>
Execute XQuery:         GET     query?<xquery>


metadata.dbx
------------

Structure:

  nextId : int


collections.dbx
---------------

Structure:

  Collection               # root collection
  | id : int
  | name : String
  | validationMode : byte  # ValidationMode enum
  | noOfIndices : int
  | Index*
  | | id : int
  | | name : String
  | | path : String
  | | type : byte          # IndexType enum
  | noOfDocuments : int
  | Document*
  | | id : int
  | | name : String
  | | mediaType : byte     # MediaType
  | noOfCollections : int
  | Collection*            # tail recursion

Example:

  db/
    data/
      Foo/
        Foo-0001.xml
        Foo-0002.xml
      Bar/
        Bar-0001.xml
      

  Collection (1, "/db", OFF) {
    indices {}
    documents {}
    collections {
      Collection (2, "/db/data", ON) {
        indices {
          Index {101, "DocumentId", "/element()/Header/DocumentId", IndexType.INTEGER}
          Index {102, "DocumentType", "/element()/Header/DocumentType", IndexType.STRING}
          Index {103, "DocumentVersion", "/element()/Header/DocumentVersion", IndexType.STRING}
        }
        documents {}
        collections {
          Collection (3, "/db/data/Foo", INHERIT) {
            indices {}
            documents {
              Document (11, "Foo-0001.xml", XML)
              Document (12, "Foo-0002.xml", XML)
            }
            collections {}
          }
          Collection (4, "/db/data/Bar", INHERIT) {
            indices {}
            documents {
              Document (13, "Bar-0001.xml", XML)
            }
            collections {}
          }
        }
      }
    }


indices.dbx
-----------

Structure:

  noOfCollections : int
  Collection*
  | colId : int
  | noOfIndices
  | Index*
  | | name : String
  | | noOfValues : int
  | | value*
  | | | value : Object
  | | | noOfDocuments : int
  | | | document*
  | | | | docId : int

Example:

  Collection ("/db") {}
  Collection ("/db/data") {}
  Collection ("/db/data/Foo") {
    indexValues {
      IndexValue {101, { {1, {11}}, {2, {12} } } )
      IndexValue {102, { {"Foo", {11, 12} } } )
      IndexValue {103, { {"v1.0", {11, 12} } } )
    }
  }
  Collection ("/db/data/Bar") {
    indexValues {
      IndexValue {101, { {3, {13} } } )
      IndexValue {102, { {"Bar", {13} } } )
      IndexValue {103, { {"v1.1", {13} } } )
    }
  }


Configuration file
------------------

<?xml version="1.0" encoding="UTF-8"?>
<xc:Configuration xmlns:xc="http://www.xantippe.org/XMLSchema/Configuration/v1.0">

  <Database dir="data" />

  <Validation default="off" />
  
  <WebDavInterface enabled="true" port="8081" />
  
  <RestInterface enabled="true" port="8082" />
  
</xc:Configuration>
